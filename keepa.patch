diff --git a/app/(dashboard)/keepa/_components/ErrorMessage.tsx b/app/(dashboard)/keepa/_components/ErrorMessage.tsx
new file mode 100644
index 0000000..41fa3c6
--- /dev/null
+++ b/app/(dashboard)/keepa/_components/ErrorMessage.tsx
@@ -0,0 +1,23 @@
+"use client"
+
+import { VscError } from "react-icons/vsc"
+
+interface ErrorMessageProps {
+  message: string
+}
+
+export default function ErrorMessage({ message }: ErrorMessageProps) {
+  if (!message) return null
+
+  return (
+    <div className="border border-red-200 bg-red-50 rounded-xl p-6">
+      <div className="flex items-center gap-4">
+        <VscError className="text-red-500 size-8" />
+        <div>
+          <h4 className="font-semibold text-red-800 text-lg">Search Failed</h4>
+          <p className="text-red-700">{message}</p>
+        </div>
+      </div>
+    </div>
+  )
+}
\ No newline at end of file
diff --git a/app/(dashboard)/keepa/_components/KeepaChart.tsx b/app/(dashboard)/keepa/_components/KeepaChart.tsx
new file mode 100644
index 0000000..8d7d6eb
--- /dev/null
+++ b/app/(dashboard)/keepa/_components/KeepaChart.tsx
@@ -0,0 +1,1178 @@
+/* eslint-disable @typescript-eslint/no-explicit-any */
+"use client"
+import { useState, useMemo, useCallback, useEffect } from "react"
+import { LoadingOutlined } from "@ant-design/icons"
+import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine } from "recharts"
+import {
+  useLazyPriceHistoryQuery,
+  useLazyProductSummaryQuery,
+  useLazyRatingReviewQuery,
+  useLazySalesRankQuery,
+} from "@/redux/api/keepa"
+import { useAppSelector } from "@/redux/hooks"
+
+interface Product {
+  title: string
+  asin: string
+  category: string
+  currentPrice: number
+  salesRank: number
+}
+
+interface KeepaChartProps {
+  product: Product
+  isLoading: boolean
+  asin: string
+}
+
+interface ChartDataPoint {
+  date: string
+  dateFormatted: string
+  fullDate: string
+  amazon: number | null
+  buybox: number | null
+  new: number | null
+  rating: number | null
+  rating_count: number | null
+  new_offer_count: number | null
+  [key: string]: number | null | string
+}
+
+// Constants for better maintainability
+const TIME_RANGES = [
+  { key: "7d", label: "Week" },
+  { key: "30d", label: "Month" },
+  { key: "90d", label: "3 Months" },
+  { key: "1y", label: "Year" },
+  { key: "all", label: "All" },
+]
+const CLOSE_UP_THRESHOLD = 0.75 // 75% of data for close-up view
+const DAY_IN_MS = 86400000
+
+export default function KeepaChart({ product, isLoading, asin }: KeepaChartProps) {
+  const { marketplaceId } = useAppSelector((state) => state?.global)
+  const [fetchError, setFetchError] = useState<string | null>(null)
+  const [isTimeRangeChanging, setIsTimeRangeChanging] = useState(false)
+
+  // Synchronized hover state
+  const [syncedHoverData, setSyncedHoverData] = useState<{
+    activeTimestamp: string | null
+    activeIndex: number | null
+  }>({
+    activeTimestamp: null,
+    activeIndex: null,
+  })
+
+  function formatUnits(value: string | number): string {
+    const num = typeof value === "number" ? value : Number.parseFloat(value)
+    return isNaN(num) ? String(value) : `${Math.round(num).toLocaleString()} units`
+  }
+
+  function formatDecimal(value: string | number, decimals = 1): string {
+    const num = typeof value === "number" ? value : Number.parseFloat(value)
+    return isNaN(num) ? String(value) : num.toFixed(decimals)
+  }
+
+  // API queries with error handling
+  const [getPriceHistory, { data: priceData, isLoading: priceLoading, error: priceError }] = useLazyPriceHistoryQuery()
+  const [getProductSummary, { data: summaryData, isLoading: summaryLoading, error: summaryError }] =
+    useLazyProductSummaryQuery()
+  const [getRatingReview, { data: ratingData, isLoading: ratingLoading, error: ratingError }] =
+    useLazyRatingReviewQuery()
+  const [getSalesRank, { data: salesRankData, isLoading: salesRankLoading, error: salesRankError }] =
+    useLazySalesRankQuery()
+
+  // Separate API call for 'all' timeframe data for listing age calculation
+  const [getPriceHistoryAll, { data: priceDataAll, isLoading: priceLoadingAll, error: priceErrorAll }] =
+    useLazyPriceHistoryQuery()
+
+  // Loading states - separate initial loading from chart updates
+  const isInitialLoading = useMemo(
+    () =>
+      isLoading ||
+      (priceLoading && !priceData) ||
+      (summaryLoading && !summaryData) ||
+      (ratingLoading && !ratingData) ||
+      (salesRankLoading && !salesRankData) ||
+      (priceLoadingAll && !priceDataAll),
+    [
+      isLoading,
+      priceLoading,
+      priceData,
+      summaryLoading,
+      summaryData,
+      ratingLoading,
+      ratingData,
+      salesRankLoading,
+      salesRankData,
+      priceLoadingAll,
+      priceDataAll,
+    ],
+  )
+
+  const isLoadingOverall = useMemo(
+    () =>
+      isLoading ||
+      priceLoading ||
+      summaryLoading ||
+      ratingLoading ||
+      salesRankLoading ||
+      priceLoadingAll ||
+      isTimeRangeChanging,
+    [isLoading, priceLoading, summaryLoading, ratingLoading, salesRankLoading, priceLoadingAll, isTimeRangeChanging],
+  )
+
+  // Individual chart metric states
+  const [priceMetrics, setPriceMetrics] = useState({
+    amazon: true,
+    buybox: true,
+    new: true,
+  })
+
+  const [salesRankMetrics, setSalesRankMetrics] = useState<Record<string, boolean>>({})
+  const [ratingMetrics, setRatingMetrics] = useState({
+    rating: true,
+    rating_count: true,
+    new_offer_count: true,
+  })
+
+  // Universal time range and individual close-up states
+  const [universalTimeRange, setUniversalTimeRange] = useState("90d")
+  const [priceCloseUpView, setPriceCloseUpView] = useState(false)
+  const [salesRankCloseUpView, setSalesRankCloseUpView] = useState(false)
+  const [ratingCloseUpView, setRatingCloseUpView] = useState(false)
+
+  // Check for API errors
+  useEffect(() => {
+    const errors = [priceError, summaryError, ratingError, salesRankError, priceErrorAll].filter(Boolean)
+    if (errors.length > 0) {
+      setFetchError("Failed to load chart data. Please try again later.")
+    }
+  }, [priceError, summaryError, ratingError, salesRankError, priceErrorAll])
+
+  // Fetch data when asin or time range changes
+  useEffect(() => {
+    if (asin && marketplaceId) {
+      setFetchError(null)
+
+      const getRatingPeriod = (range: string): string => {
+        switch (range) {
+          case "7d":
+            return "week"
+          case "30d":
+            return "month"
+          case "90d":
+            return "3months"
+          case "1y":
+          case "all":
+            return "all"
+          default:
+            return "3months"
+        }
+      }
+      const ratingPeriod = getRatingPeriod(universalTimeRange)
+
+      Promise.all([
+        getPriceHistory({
+          asin,
+          id: marketplaceId,
+          period: universalTimeRange,
+        }),
+        getProductSummary({ asin, id: marketplaceId }),
+        getRatingReview({ asin, id: marketplaceId, period: ratingPeriod }),
+        getSalesRank({ asin, id: marketplaceId, period: universalTimeRange }),
+        // Fetch 'all' timeframe data for listing age calculation
+        getPriceHistoryAll({
+          asin,
+          id: marketplaceId,
+          period: "all",
+        }),
+      ])
+        .then(() => {
+          setIsTimeRangeChanging(false)
+        })
+        .catch((error) => {
+          console.error("API Error:", error)
+          setFetchError("Failed to load data. Please try again.")
+          setIsTimeRangeChanging(false)
+        })
+    }
+  }, [
+    asin,
+    marketplaceId,
+    universalTimeRange,
+    getPriceHistory,
+    getProductSummary,
+    getRatingReview,
+    getSalesRank,
+    getPriceHistoryAll,
+  ])
+
+  // Initialize salesRankMetrics with default values
+  useEffect(() => {
+    if (salesRankData?.data?.sales_rank?.sales_rank_data) {
+      setSalesRankMetrics((prev) => {
+        const updatedMetrics = { ...prev }
+        Object.keys(salesRankData.data.sales_rank.sales_rank_data).forEach((key) => {
+          if (updatedMetrics[key] === undefined) {
+            updatedMetrics[key] = true
+          }
+        })
+        return updatedMetrics
+      })
+    }
+  }, [salesRankData])
+
+  // Process chart data from API responses
+  const chartData: ChartDataPoint[] = useMemo(() => {
+    if (!priceData?.data?.price_history) return []
+
+    const priceHistory = priceData.data.price_history.price_types
+    const salesRankHistory = salesRankData?.data?.sales_rank?.sales_rank_data || {}
+    const ratingHistory = ratingData?.data?.chart_data || {}
+
+    // Get all unique timestamps from all data sources
+    const allTimestamps = new Set<string>()
+
+    // Add price timestamps
+    Object.values(priceHistory).forEach((priceType: any) => {
+      if (priceType.data) {
+        Object.keys(priceType.data).forEach((timestamp) => {
+          allTimestamps.add(timestamp)
+        })
+      }
+    })
+
+    // Add sales rank and monthly sold timestamps
+    Object.entries(salesRankHistory).forEach(([key, rankType]: [string, any]) => {
+      if (rankType.data) {
+        if (key === "monthly_sold") {
+          Object.keys(rankType.data).forEach((timestamp) => {
+            allTimestamps.add(timestamp)
+          })
+        } else if (Array.isArray(rankType.data)) {
+          rankType.data.forEach((entry: any) => allTimestamps.add(entry.date))
+        } else {
+          Object.keys(rankType.data).forEach((timestamp) => {
+            allTimestamps.add(timestamp)
+          })
+        }
+      }
+    })
+
+    // Add rating timestamps - handle both object and array formats
+    Object.keys(ratingHistory).forEach((key) => {
+      const ratingItem = ratingHistory[key]
+      if (ratingItem?.data) {
+        if (Array.isArray(ratingItem.data)) {
+          // Handle array format (like new_offer_count)
+          ratingItem.data.forEach((entry: any) => {
+            allTimestamps.add(entry.date)
+          })
+        } else {
+          // Handle object format (like rating_count)
+          Object.keys(ratingItem.data).forEach((timestamp) => {
+            allTimestamps.add(timestamp)
+          })
+        }
+      }
+    })
+
+    // Convert to sorted array
+    const sortedTimestamps = Array.from(allTimestamps).sort()
+
+    return sortedTimestamps
+      .map((timestamp) => {
+        const date = new Date(timestamp)
+
+        // Format date based on time range
+        const formatDate = () => {
+          switch (universalTimeRange) {
+            case "7d":
+              return date.toLocaleDateString("en-GB", {
+                weekday: "short",
+                day: "numeric",
+              })
+            case "30d":
+              return date.toLocaleDateString("en-GB", {
+                month: "short",
+                day: "numeric",
+              })
+            case "90d":
+              return date.toLocaleDateString("en-GB", {
+                month: "short",
+                day: "numeric",
+              })
+            case "1y":
+            case "all":
+              return date.toLocaleDateString("en-GB", {
+                month: "short",
+                day: "numeric",
+                year: "2-digit",
+              })
+            default:
+              return date.toLocaleDateString("en-GB", {
+                month: "short",
+                day: "numeric",
+              })
+          }
+        }
+
+        // Get price data for this timestamp
+        const amazonPrice = priceHistory.amazon?.data?.[timestamp]?.price ?? null
+        const buyboxPrice = priceHistory.buybox?.data?.[timestamp]?.price ?? null
+        const newPrice = priceHistory.new?.data?.[timestamp]?.price ?? null
+
+        // Get sales rank data for this timestamp dynamically
+        const salesRankDataForTimestamp: Record<string, number | null> = {}
+        Object.keys(salesRankHistory).forEach((key) => {
+          if (key === "main_bsr") {
+            salesRankDataForTimestamp[key] = salesRankHistory[key]?.data?.[timestamp]?.rank ?? null
+          } else if (key.startsWith("category_")) {
+            const categoryEntry = salesRankHistory[key]?.data?.find(
+              (entry: any) => Math.abs(new Date(entry.date).getTime() - date.getTime()) < DAY_IN_MS,
+            )
+            salesRankDataForTimestamp[key] = categoryEntry?.rank ?? null
+          } else if (key === "monthly_sold") {
+            salesRankDataForTimestamp[key] = salesRankHistory[key]?.data?.[timestamp]?.value ?? null
+          }
+        })
+
+        // Get rating data for this timestamp - handle both object and array formats
+        const ratingDataForTimestamp: Record<string, number | null> = {}
+
+        Object.keys(ratingHistory).forEach((key) => {
+          const ratingItem = ratingHistory[key]
+          if (ratingItem?.data) {
+            let entry = null
+
+            if (Array.isArray(ratingItem.data)) {
+              // Handle array format (like new_offer_count)
+              entry = ratingItem.data.find(
+                (item: any) => Math.abs(new Date(item.date).getTime() - date.getTime()) < DAY_IN_MS,
+              )
+            } else {
+              // Handle object format (like rating_count)
+              entry = Object.values(ratingItem.data).find(
+                (item: any) => Math.abs(new Date(item.date).getTime() - date.getTime()) < DAY_IN_MS,
+              ) as any
+            }
+
+            ratingDataForTimestamp[key] = entry?.value ?? null
+          }
+        })
+
+        // Rating is typically static, use from summary or default
+        const rating = summaryData?.data?.current_data?.rating || 4.0
+
+        return {
+          date: timestamp,
+          dateFormatted: formatDate(),
+          fullDate: date.toLocaleDateString("en-GB", {
+            weekday: "long",
+            year: "numeric",
+            month: "long",
+            day: "numeric",
+          }),
+          // Price data
+          amazon: amazonPrice,
+          buybox: buyboxPrice,
+          new: newPrice,
+          // Sales rank data (now dynamic, including monthly_sold)
+          ...salesRankDataForTimestamp,
+          // Rating data (now dynamic)
+          rating: rating,
+          ...ratingDataForTimestamp,
+        }
+      })
+      .filter(
+        (item) =>
+          // Filter out entries with no data
+          item.amazon !== null ||
+          item.buybox !== null ||
+          item.new !== null ||
+          Object.keys(salesRankHistory).some(
+            (key) => (item as any)[key] !== null && (item as any)[key] !== undefined,
+          ) ||
+          Object.keys(ratingHistory).some((key) => (item as any)[key] !== null && (item as any)[key] !== undefined),
+      ) as ChartDataPoint[]
+  }, [priceData, salesRankData, ratingData, summaryData, universalTimeRange])
+
+  // Get available price types from API data
+  const availablePriceTypes = useMemo(() => {
+    if (!priceData?.data?.price_history?.summary) return []
+    return priceData.data.price_history.summary.available_types || []
+  }, [priceData])
+
+  // Handle time range change with loading state
+  const handleTimeRangeChange = useCallback((newRange: string) => {
+    setIsTimeRangeChanging(true)
+    setUniversalTimeRange(newRange)
+    // Reset hover state when time range changes
+    setSyncedHoverData({ activeTimestamp: null, activeIndex: null })
+  }, [])
+
+  // Synchronized mouse event handlers
+  const handleMouseMove = useCallback((e: any) => {
+    if (e && e.activeLabel) {
+      // Use requestAnimationFrame to batch updates and sync with the browser's paint cycle.
+      // This prevents the high-frequency re-renders from causing a "refreshing" or janky feel.
+      window.requestAnimationFrame(() => {
+        setSyncedHoverData({
+          activeTimestamp: e.activeLabel,
+          activeIndex: e.activeTooltipIndex,
+        })
+      })
+    }
+  }, []) // setSyncedHoverData is stable, so no dependency needed
+
+  const handleMouseLeave = useCallback(() => {
+    setSyncedHoverData({ activeTimestamp: null, activeIndex: null })
+  }, [])
+
+  // Tooltip props interface
+  interface TooltipProps {
+    active?: boolean
+    payload?: Array<{
+      dataKey: string
+      value: any
+      color: string
+      name: string
+    }>
+    label?: string
+  }
+
+  function abbreviateNumber(value: number): string {
+    if (value >= 1e9) return (value / 1e9).toFixed(1) + "B"
+    if (value >= 1e6) return (value / 1e6).toFixed(1) + "M"
+    if (value >= 1e3) return (value / 1e3).toFixed(1) + "K"
+    return value.toString()
+  }
+
+  // Custom tooltip components with synchronized hover
+  const CustomTooltip = ({ active, payload, label }: TooltipProps) => {
+    // Show tooltip if either the chart is actively hovered or if it matches the synced hover state
+    const shouldShow = active || syncedHoverData.activeTimestamp === label
+
+    if (shouldShow && payload && payload.length) {
+      // Since label is now a timestamp, we need to find the dataPoint using the timestamp
+      const dataPoint = chartData.find((d) => d.date === label)
+
+      return (
+        <div className="bg-white p-3 border border-gray-200 rounded shadow-lg">
+          <p className="font-medium text-gray-800 mb-2">
+            {dataPoint?.fullDate ||
+              (label
+                ? new Date(label).toLocaleDateString("en-GB", {
+                    weekday: "long",
+                    year: "numeric",
+                    month: "long",
+                    day: "numeric",
+                  })
+                : "")}
+          </p>
+          {payload.map((entry, index) => {
+            if (entry.value === null || entry.value === undefined) return null
+            return (
+              <p key={index} style={{ color: entry.color }} className="text-sm">
+                {entry.name}:{" "}
+                {entry.dataKey.includes("price") ||
+                entry.dataKey === "amazon" ||
+                entry.dataKey === "buybox" ||
+                entry.dataKey === "new"
+                  ? `${Number(entry.value).toFixed(2)}`
+                  : entry.dataKey === "monthly_sold"
+                    ? formatUnits(entry.value)
+                    : entry.dataKey === "rating"
+                      ? formatDecimal(entry.value)
+                      : entry.dataKey.includes("rank") || entry.dataKey.includes("bsr")
+                        ? `#${Math.round(Number(entry.value)).toLocaleString()}`
+                        : formatDecimal(entry.value)}
+              </p>
+            )
+          })}
+        </div>
+      )
+    }
+    return null
+  }
+
+  if (isInitialLoading) {
+    return (
+      <div className="border border-border rounded-xl p-6 bg-white">
+        <div className="animate-pulse">
+          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
+          <div className="h-64 bg-gray-200 rounded"></div>
+        </div>
+      </div>
+    )
+  }
+
+  // Universal Time Range Controller
+  const UniversalTimeController = () => (
+    <div className="px-6 py-3 border-b border-border bg-[#FAFAFA] flex items-center justify-between">
+      <div className="flex items-center gap-4">
+        <span className="text-sm font-medium text-[#01011D]">Time Range:</span>
+        <div className="flex items-center gap-2">
+          {TIME_RANGES.map((range) => (
+            <button
+              key={range.key}
+              onClick={() => handleTimeRangeChange(range.key)}
+              disabled={isLoadingOverall}
+              className={`px-3 py-1 text-xs rounded transition-colors flex items-center gap-1 ${
+                universalTimeRange === range.key ? "bg-primary text-white" : "bg-white text-[#787891] hover:bg-gray-100"
+              } ${isLoadingOverall ? "opacity-50 cursor-not-allowed" : ""}`}
+              aria-label={`Set time range to ${range.label}`}
+            >
+              {isLoadingOverall && universalTimeRange === range.key && (
+                <LoadingOutlined spin style={{ fontSize: "12px" }} />
+              )}
+              {range.label}
+            </button>
+          ))}
+        </div>
+      </div>
+      <div className="text-xs text-[#787891] flex items-center gap-2">
+        {isLoadingOverall && (
+          <div className="flex items-center gap-1">
+            <LoadingOutlined spin style={{ fontSize: "12px" }} />
+            <span>Loading...</span>
+          </div>
+        )}
+        <span>
+          Total Price Types: {priceData?.data?.price_history?.summary?.total_price_types || 0} | Data Points:{" "}
+          {chartData.length}
+        </span>
+      </div>
+    </div>
+  )
+
+  const ChartCloseUpToggle = ({
+    closeUpView,
+    onToggle,
+    title,
+  }: {
+    closeUpView: boolean
+    onToggle: (enabled: boolean) => void
+    title: string
+  }) => (
+    <div className="px-4 py-2 bg-[#FAFAFA] border-b border-border flex items-center justify-between">
+      <span className="text-sm font-medium text-[#01011D]">{title}</span>
+      <div className="flex items-center gap-3">
+        <span className="text-xs text-[#787891]">Close-up view</span>
+        <label className="relative inline-flex items-center cursor-pointer">
+          <input
+            type="checkbox"
+            checked={closeUpView}
+            onChange={(e) => onToggle(e.target.checked)}
+            className="sr-only peer"
+            aria-label={`Toggle close-up view for ${title}`}
+          />
+          <div className="w-9 h-5 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-primary"></div>
+        </label>
+      </div>
+    </div>
+  )
+
+  // Interactive Chart Controllers with actual API data
+  const PriceChartController = () => (
+    <div className="w-40 border-l border-border bg-[#FAFAFA] p-2">
+      <h4 className="font-semibold text-xs text-[#01011D] mb-1">Price Types</h4>
+      <div className="space-y-1">
+        {availablePriceTypes.map((priceType: any) => {
+          const priceTypeData = priceData?.data?.price_history?.price_types?.[priceType]
+          if (!priceTypeData) return null
+
+          return (
+            <div
+              key={priceType}
+              className={`flex items-center gap-1 p-1 rounded cursor-pointer transition-colors ${
+                priceMetrics[priceType as keyof typeof priceMetrics] ? "bg-white shadow-sm" : "hover:bg-white"
+              }`}
+              onClick={() =>
+                setPriceMetrics((prev) => ({
+                  ...prev,
+                  [priceType]: !prev[priceType as keyof typeof prev],
+                }))
+              }
+              aria-label={`Toggle ${priceTypeData.label} visibility`}
+            >
+              <div
+                className={`w-3 h-3 rounded border`}
+                style={{
+                  backgroundColor: priceMetrics[priceType as keyof typeof priceMetrics]
+                    ? priceTypeData.color
+                    : "transparent",
+                  borderColor: priceTypeData.color,
+                }}
+              ></div>
+              <span className="text-xs flex-1">{priceTypeData.label}</span>
+            </div>
+          )
+        })}
+      </div>
+    </div>
+  )
+
+  const SalesRankController = () => (
+    <div className="w-40 border-l border-border bg-[#FAFAFA] p-2">
+      <h4 className="font-semibold text-xs text-[#01011D] mb-1">Sales Rank & Volume</h4>
+      <div className="space-y-1">
+        {Object.entries(salesRankData?.data?.sales_rank?.sales_rank_data || {}).map(
+          ([key, rankData]: [string, any]) => (
+            <div
+              key={key}
+              className={`flex items-center gap-1 p-1 rounded cursor-pointer transition-colors ${
+                salesRankMetrics[key] ? "bg-white shadow-sm" : "hover:bg-white"
+              }`}
+              onClick={() => setSalesRankMetrics((prev) => ({ ...prev, [key]: !prev[key] }))}
+              aria-label={`Toggle ${rankData.label} visibility`}
+            >
+              <div
+                className={`w-3 h-3 rounded border`}
+                style={{
+                  backgroundColor: salesRankMetrics[key] ? rankData.color : "transparent",
+                  borderColor: rankData.color,
+                }}
+              ></div>
+              <span className="text-xs flex-1">{rankData.label}</span>
+            </div>
+          ),
+        )}
+      </div>
+    </div>
+  )
+
+  const RatingController = () => (
+    <div className="w-40 border-l border-border bg-[#FAFAFA] p-2">
+      <h4 className="font-semibold text-xs text-[#01011D] mb-1">Rating & Reviews</h4>
+      <div className="space-y-1">
+        {Object.entries(ratingData?.data?.chart_data || {}).map(([key, ratingDataItem]: [string, any]) => {
+          if (!ratingDataItem.label) return null
+
+          return (
+            <div
+              key={key}
+              className={`flex items-center gap-1 p-1 rounded cursor-pointer transition-colors ${
+                ratingMetrics[key as keyof typeof ratingMetrics] ? "bg-white shadow-sm" : "hover:bg-white"
+              }`}
+              onClick={() =>
+                setRatingMetrics((prev) => ({
+                  ...prev,
+                  [key]: !prev[key as keyof typeof prev],
+                }))
+              }
+              aria-label={`Toggle ${ratingDataItem.label} visibility`}
+            >
+              <div
+                className={`w-3 h-3 rounded border`}
+                style={{
+                  backgroundColor: ratingMetrics[key as keyof typeof ratingMetrics]
+                    ? ratingDataItem.color
+                    : "transparent",
+                  borderColor: ratingDataItem.color,
+                }}
+              ></div>
+              <span className="text-xs flex-1">{ratingDataItem.label}</span>
+            </div>
+          )
+        })}
+      </div>
+    </div>
+  )
+
+  // Filter data for close-up view
+  const getFilteredData = (closeUpView: boolean) => {
+    if (!closeUpView || chartData.length === 0) return chartData
+    const focusStartIndex = Math.max(0, Math.floor(chartData.length * (1 - CLOSE_UP_THRESHOLD)))
+    return chartData.slice(focusStartIndex)
+  }
+
+  return (
+    <div className="border border-border rounded-xl bg-white overflow-hidden">
+      {/* Header */}
+      <div className="p-6 border-b border-border">
+        <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
+          <div>
+            <h3 className="font-semibold text-lg text-[#01011D] mb-1">
+              {priceData?.data?.product?.name || product.title}
+            </h3>
+            <p className="text-sm text-[#787891]">
+              ASIN: {priceData?.data?.product?.asin || product.asin} | Marketplace:{" "}
+              {priceData?.data?.product?.marketplace_id || "N/A"}
+            </p>
+          </div>
+
+          <div className="flex items-center gap-4">
+            <div className="text-sm">
+              <span className="text-[#787891]">Current Price: </span>
+              <span className="font-semibold text-[#01011D]">
+                {priceData?.data?.price_history?.price_types?.buybox?.current_price
+                  ? `$${priceData.data.price_history.price_types.buybox.current_price}`
+                  : `$${product.currentPrice}`}
+              </span>
+            </div>
+            <div className="text-sm">
+              <span className="text-[#787891]">Sales Rank: </span>
+              <span className="font-semibold text-[#01011D]">
+                #{salesRankData?.data?.sales_rank?.sales_rank_data?.main_bsr?.current_rank || product.salesRank}
+              </span>
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <UniversalTimeController />
+
+      {/* Error message display */}
+      {fetchError && (
+        <div className="bg-red-100 border border-red-400 text-red-700 px-6 py-3" role="alert">
+          <strong className="font-bold">Error! </strong>
+          <span>{fetchError}</span>
+        </div>
+      )}
+
+      <div className="p-6 space-y-4">
+        {/* Main Price Chart */}
+        <div className="flex gap-4">
+          <div className="flex-1">
+            <div className="relative border border-gray-200 rounded bg-white overflow-hidden">
+              <ChartCloseUpToggle closeUpView={priceCloseUpView} onToggle={setPriceCloseUpView} title="Price History" />
+
+              <div className="h-72 relative overflow-hidden">
+                {isLoadingOverall && (
+                  <div className="absolute inset-0 bg-white/80 flex items-center justify-center z-10">
+                    <div className="flex items-center gap-2 text-sm text-gray-600">
+                      <LoadingOutlined spin />
+                      Loading chart data...
+                    </div>
+                  </div>
+                )}
+
+                <ResponsiveContainer width="100%" height="100%">
+                  <LineChart
+                    data={getFilteredData(priceCloseUpView)}
+                    margin={{ top: 20, right: 10, left: 10, bottom: 10 }}
+                    onMouseMove={handleMouseMove}
+                    onMouseLeave={handleMouseLeave}
+                    //cursor={false}
+                    aria-label="Price history chart"
+                  >
+                    <CartesianGrid strokeDasharray="1 1" stroke="#f0f0f0" />
+                    <XAxis
+                      dataKey="date"
+                      tick={{ fontSize: 10 }}
+                      interval={Math.max(1, Math.floor(getFilteredData(priceCloseUpView).length / 8))}
+                      tickFormatter={(timestamp) => {
+                        const date = new Date(timestamp)
+                        return date.toLocaleDateString("en-GB", {
+                          month: "short",
+                          day: "numeric",
+                        })
+                      }}
+                      minTickGap={30}
+                    />
+                    <YAxis
+                      yAxisId="price"
+                      tick={{ fontSize: 10 }}
+                      domain={["dataMin", "dataMax"]}
+                      tickFormatter={(value) => `$${value}`}
+                    />
+                    <Tooltip content={<CustomTooltip />} />
+
+                    {/* Synchronized reference line */}
+                    {syncedHoverData.activeTimestamp && (
+                      <ReferenceLine
+                        x={syncedHoverData.activeTimestamp}
+                        stroke="#666"
+                        strokeDasharray="2 2"
+                        strokeWidth={1}
+                        yAxisId="price"
+                      />
+                    )}
+
+                    {priceMetrics.new && (
+                      <Line
+                        type="linear"
+                        dataKey="new"
+                        name="New"
+                        stroke={priceData?.data?.price_history?.price_types?.new?.color || "#45B7D1"}
+                        strokeWidth={1}
+                        dot={false}
+                        connectNulls={true}
+                        yAxisId="price"
+                      />
+                    )}
+
+                    {priceMetrics.buybox && (
+                      <Line
+                        type="linear"
+                        dataKey="buybox"
+                        name="Buy Box"
+                        stroke={priceData?.data?.price_history?.price_types?.buybox?.color || "#4ECDC4"}
+                        strokeWidth={1}
+                        dot={false}
+                        connectNulls={true}
+                        yAxisId="price"
+                      />
+                    )}
+
+                    {priceMetrics.amazon && (
+                      <Line
+                        type="linear"
+                        dataKey="amazon"
+                        name="Amazon"
+                        stroke={priceData?.data?.price_history?.price_types?.amazon?.color || "#FF6B6B"}
+                        strokeWidth={1}
+                        dot={false}
+                        connectNulls={true}
+                        yAxisId="price"
+                      />
+                    )}
+                  </LineChart>
+                </ResponsiveContainer>
+              </div>
+            </div>
+          </div>
+          <PriceChartController />
+        </div>
+
+        {/* Category Sales Ranks Chart */}
+        <div className="flex gap-4">
+          <div className="flex-1">
+            <div className="relative border border-gray-200 rounded bg-white overflow-hidden">
+              <ChartCloseUpToggle
+                closeUpView={salesRankCloseUpView}
+                onToggle={setSalesRankCloseUpView}
+                title="Sales Rank & Volume"
+              />
+
+              <div className="h-56 relative overflow-hidden">
+                {isLoadingOverall && (
+                  <div className="absolute inset-0 bg-white/80 flex items-center justify-center z-10">
+                    <div className="flex items-center gap-2 text-sm text-gray-600">
+                      <LoadingOutlined spin />
+                      Loading chart data...
+                    </div>
+                  </div>
+                )}
+
+                <ResponsiveContainer width="100%" height="100%">
+                  <LineChart
+                    data={getFilteredData(salesRankCloseUpView)}
+                    margin={{ top: 20, right: 10, left: 10, bottom: 10 }}
+                    onMouseMove={handleMouseMove}
+                    onMouseLeave={handleMouseLeave}
+                    //cursor={false}
+                    aria-label="Sales rank chart"
+                  >
+                    <CartesianGrid strokeDasharray="1 1" stroke="#f0f0f0" />
+                    <XAxis
+                      dataKey="date"
+                      tick={{ fontSize: 10 }}
+                      interval={Math.max(1, Math.floor(getFilteredData(salesRankCloseUpView).length / 8))}
+                      tickFormatter={(timestamp) => {
+                        const date = new Date(timestamp)
+                        return date.toLocaleDateString("en-GB", {
+                          month: "short",
+                          day: "numeric",
+                        })
+                      }}
+                      minTickGap={30}
+                    />
+
+                    {/* Left axis for monthly sold */}
+                    <YAxis
+                      yAxisId="left"
+                      orientation="left"
+                      tick={{ fontSize: 10 }}
+                      tickFormatter={(value) => abbreviateNumber(value)}
+                    />
+
+                    {/* Right axis for all sales ranks */}
+                    <YAxis
+                      yAxisId="right"
+                      orientation="right"
+                      tick={{ fontSize: 10 }}
+                      tickFormatter={(value) => `#${abbreviateNumber(value)}`}
+                      reversed={true}
+                    />
+
+                    <Tooltip content={<CustomTooltip />} />
+
+                    {/* Synchronized reference line */}
+                    {syncedHoverData.activeTimestamp && (
+                      <ReferenceLine
+                        x={syncedHoverData.activeTimestamp}
+                        stroke="#666"
+                        strokeDasharray="2 2"
+                        strokeWidth={1}
+                        yAxisId="left"
+                      />
+                    )}
+
+                    {/* Map lines to correct axes */}
+                    {Object.entries(salesRankMetrics).map(([key, isActive]) => {
+                      if (!isActive) return null
+                      const rankData = salesRankData?.data?.sales_rank?.sales_rank_data?.[key]
+                      if (!rankData) return null
+
+                      // Assign monthly_sold to left axis, others to right
+                      const yAxisIdToUse = key === "monthly_sold" ? "left" : "right"
+
+                      return (
+                        <Line
+                          key={key}
+                          type="linear"
+                          dataKey={key}
+                          name={rankData.label}
+                          stroke={rankData.color}
+                          strokeWidth={1}
+                          dot={false}
+                          connectNulls={true}
+                          yAxisId={yAxisIdToUse}
+                        />
+                      )
+                    })}
+                  </LineChart>
+                </ResponsiveContainer>
+              </div>
+            </div>
+          </div>
+          <SalesRankController />
+        </div>
+
+        {/* Rating Chart */}
+        <div className="flex gap-4">
+          <div className="flex-1">
+            <div className="relative border border-gray-200 rounded bg-white overflow-hidden">
+              <ChartCloseUpToggle
+                closeUpView={ratingCloseUpView}
+                onToggle={setRatingCloseUpView}
+                title="Rating & Reviews"
+              />
+
+              <div className="h-56 relative overflow-hidden">
+                {isLoadingOverall && (
+                  <div className="absolute inset-0 bg-white/80 flex items-center justify-center z-10">
+                    <div className="flex items-center gap-2 text-sm text-gray-600">
+                      <LoadingOutlined spin />
+                      Loading chart data...
+                    </div>
+                  </div>
+                )}
+
+                <ResponsiveContainer width="100%" height="100%">
+                  <LineChart
+                    data={getFilteredData(ratingCloseUpView)}
+                    margin={{ top: 20, right: 10, left: 10, bottom: 10 }}
+                    onMouseMove={handleMouseMove}
+                    onMouseLeave={handleMouseLeave}
+                    //cursor={false}
+                    aria-label="Rating and reviews chart"
+                  >
+                    <CartesianGrid strokeDasharray="1 1" stroke="#f0f0f0" />
+                    <XAxis
+                      dataKey="date"
+                      tick={{ fontSize: 10 }}
+                      interval={Math.max(1, Math.floor(getFilteredData(ratingCloseUpView).length / 8))}
+                      tickFormatter={(timestamp) => {
+                        const date = new Date(timestamp)
+                        return date.toLocaleDateString("en-GB", {
+                          month: "short",
+                          day: "numeric",
+                        })
+                      }}
+                      minTickGap={30}
+                    />
+                    <YAxis
+                      yAxisId="count"
+                      orientation="left"
+                      tick={{ fontSize: 10 }}
+                      tickFormatter={(value) => Math.round(value).toLocaleString()}
+                    />
+                    <YAxis
+                      yAxisId="rating"
+                      orientation="right"
+                      tick={{ fontSize: 10 }}
+                      domain={[0, 5]}
+                      tickFormatter={(value) => value.toFixed(1)}
+                    />
+                    <YAxis
+                      yAxisId="offers"
+                      orientation="right"
+                      tick={{ fontSize: 10 }}
+                      domain={[0, 5]} // Fixed domain for offer count (0-5)
+                      hide={true} // Hide this axis since it's not used in the chart
+                      tickFormatter={(value) => Math.round(value).toString()}
+                    />
+                    <Tooltip content={<CustomTooltip />} />
+
+                    {/* Synchronized reference line */}
+                    {syncedHoverData.activeTimestamp && (
+                      <ReferenceLine
+                        x={syncedHoverData.activeTimestamp}
+                        stroke="#666"
+                        strokeDasharray="2 2"
+                        strokeWidth={1}
+                        yAxisId="count"
+                      />
+                    )}
+
+                    {ratingMetrics.rating_count && (
+                      <Line
+                        type="linear"
+                        dataKey="rating_count"
+                        name="Rating Count"
+                        stroke={ratingData?.data?.chart_data?.rating_count?.color || "#8884d8"}
+                        strokeWidth={1}
+                        dot={false}
+                        connectNulls={true}
+                        yAxisId="count"
+                      />
+                    )}
+                    {ratingMetrics.rating && (
+                      <Line
+                        type="linear"
+                        dataKey="rating"
+                        name="Rating"
+                        stroke={ratingData?.data?.chart_data?.rating?.color || "#82ca9d"}
+                        strokeWidth={1}
+                        dot={false}
+                        connectNulls={true}
+                        yAxisId="rating"
+                      />
+                    )}
+                    {ratingMetrics.new_offer_count && (
+                      <Line
+                        type="linear"
+                        dataKey="new_offer_count"
+                        name="New Offer Count"
+                        stroke={ratingData?.data?.chart_data?.new_offer_count?.color || "#ffc658"}
+                        strokeWidth={1}
+                        dot={false}
+                        connectNulls={true}
+                        yAxisId="offers"
+                      />
+                    )}
+                  </LineChart>
+                </ResponsiveContainer>
+              </div>
+            </div>
+          </div>
+          <RatingController />
+        </div>
+
+        {/* Chart Footer Info */}
+        <div className="mt-4 text-xs text-[#787891] space-y-1">
+          <div className="flex items-center gap-4 mt-2">
+            <span>
+              Current BSR: #{salesRankData?.data?.sales_rank?.sales_rank_data?.main_bsr?.current_value || "N/A"}
+            </span>
+            <span>Best: #{salesRankData?.data?.sales_rank?.sales_rank_data?.main_bsr?.best_value || "N/A"}</span>
+            <span>Worst: #{salesRankData?.data?.sales_rank?.sales_rank_data?.main_bsr?.worst_value || "N/A"}</span>
+          </div>
+        </div>
+      </div>
+
+      {/* Bottom Stats */}
+      <div className="p-6 border-t border-border bg-[#FAFAFA]">
+        <div className="grid grid-cols-2 lg:grid-cols-5 gap-4 text-sm">
+          <div>
+            <p className="text-[#787891] mb-1">Category Sales Ranks</p>
+            <div className="space-y-1">
+              {summaryData?.data?.category_sales_ranks?.slice(0, 2).map((category: any, index: number) => (
+                <div key={category.name} className="flex items-center gap-2">
+                  <span className={`w-3 h-3 rounded bg-green-${500 + index * 100}`}></span>
+                  <span className="text-[#01011D] text-xs">{category.name}</span>
+                </div>
+              ))}
+            </div>
+          </div>
+
+          <div>
+            <p className="text-[#787891] mb-1">Current Data</p>
+            <div className="space-y-1 text-xs">
+              <p>Rating: {summaryData?.data?.current_data?.rating?.toFixed(1) || "N/A"}</p>
+            </div>
+          </div>
+
+          <div>
+            <p className="text-[#787891] mb-1">Price Range</p>
+            <div className="space-y-1 text-xs">
+              <p>
+                High: {summaryData?.data?.price_range?.currency || "$"}
+                {summaryData?.data?.price_range?.high || "N/A"}
+              </p>
+              <p>
+                Low: {summaryData?.data?.price_range?.currency || "$"}
+                {summaryData?.data?.price_range?.low || "N/A"}
+              </p>
+              <p>
+                Current: {summaryData?.data?.price_range?.currency || "$"}
+                {summaryData?.data?.price_range?.current || "N/A"}
+              </p>
+            </div>
+          </div>
+
+          <div>
+            <p className="text-[#787891] mb-1">Listing Age</p>
+            <div className="space-y-1 text-xs">
+              <p>
+                {(() => {
+                  // Get earliest timestamp from 'all' timeframe price history data
+                  const priceHistoryAll = priceDataAll?.data?.price_history?.price_types
+                  if (!priceHistoryAll) return "N/A"
+
+                  const allTimestamps = new Set<string>()
+
+                  // Collect all timestamps from 'all' timeframe price history
+                  Object.values(priceHistoryAll).forEach((priceType: any) => {
+                    if (priceType.data) {
+                      Object.keys(priceType.data).forEach((timestamp) => {
+                        allTimestamps.add(timestamp)
+                      })
+                    }
+                  })
+
+                  if (allTimestamps.size === 0) return "N/A"
+
+                  // Get the earliest timestamp
+                  const sortedTimestamps = Array.from(allTimestamps).sort()
+                  const earliestTimestamp = sortedTimestamps[0]
+
+                  const startDate = new Date(earliestTimestamp)
+                  const currentDate = new Date()
+                  const diffTime = Math.abs(currentDate.getTime() - startDate.getTime())
+                  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
+
+                  const years = Math.floor(diffDays / 365)
+                  const months = Math.floor((diffDays % 365) / 30)
+                  const days = diffDays % 30
+
+                  if (years > 0) {
+                    return months > 0 ? `${years}y ${months}m` : `${years}y ${days}d`
+                  } else if (months > 0) {
+                    return days > 0 ? `${months}m ${days}d` : `${months}m`
+                  } else {
+                    return `${days}d`
+                  }
+                })()}
+              </p>
+            </div>
+          </div>
+
+          <div className="text-right">
+            <p className="text-sm font-medium">{summaryData?.data?.metadata?.timestamp || "N/A"}</p>
+            {isLoadingOverall && (
+              <div className="flex items-center gap-1 justify-end mt-1">
+                <LoadingOutlined spin style={{ fontSize: "12px" }} />
+                <span className="text-xs text-blue-600">Updating...</span>
+              </div>
+            )}
+          </div>
+        </div>
+      </div>
+    </div>
+  )
+}
\ No newline at end of file
diff --git a/app/(dashboard)/keepa/_components/KeepaControls.tsx b/app/(dashboard)/keepa/_components/KeepaControls.tsx
new file mode 100644
index 0000000..eb63360
--- /dev/null
+++ b/app/(dashboard)/keepa/_components/KeepaControls.tsx
@@ -0,0 +1,61 @@
+"use client"
+
+interface KeepaControlsProps {
+  timeRange: string
+  onTimeRangeChange: (range: string) => void
+  closeUpView: boolean
+  onCloseUpViewChange: (enabled: boolean) => void
+}
+
+const timeRanges = [
+  { key: 'day', label: 'Day' },
+  { key: 'week', label: 'Week' },
+  { key: 'month', label: 'Month' },
+  { key: '3months', label: '3 Months' },
+  { key: 'all', label: 'All (351 days)' }
+]
+
+export default function KeepaControls({
+  timeRange,
+  onTimeRangeChange,
+  closeUpView,
+  onCloseUpViewChange
+}: KeepaControlsProps) {
+  return (
+    <div className="px-6 py-3 border-b border-border bg-[#FAFAFA] flex items-center justify-between">
+      {/* Time Range Controls */}
+      <div className="flex items-center gap-4">
+        <span className="text-sm font-medium text-[#01011D]">Time Range:</span>
+        <div className="flex items-center gap-2">
+          {timeRanges.map((range) => (
+            <button
+              key={range.key}
+              onClick={() => onTimeRangeChange(range.key)}
+              className={`px-3 py-1 text-xs rounded transition-colors ${
+                timeRange === range.key
+                  ? 'bg-primary text-white'
+                  : 'bg-white text-[#787891] hover:bg-gray-100'
+              }`}
+            >
+              {range.label}
+            </button>
+          ))}
+        </div>
+      </div>
+
+      {/* Close-up View Toggle */}
+      <div className="flex items-center gap-3">
+        <span className="text-sm text-[#787891]">📊 Close-up view</span>
+        <label className="relative inline-flex items-center cursor-pointer">
+          <input
+            type="checkbox"
+            checked={closeUpView}
+            onChange={(e) => onCloseUpViewChange(e.target.checked)}
+            className="sr-only peer"
+          />
+          <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary"></div>
+        </label>
+      </div>
+    </div>
+  )
+} 
\ No newline at end of file
diff --git a/app/(dashboard)/keepa/_components/KeepaLegend.tsx b/app/(dashboard)/keepa/_components/KeepaLegend.tsx
new file mode 100644
index 0000000..698df16
--- /dev/null
+++ b/app/(dashboard)/keepa/_components/KeepaLegend.tsx
@@ -0,0 +1,106 @@
+"use client"
+
+interface SelectedMetrics {
+  buyBox: boolean
+  amazon: boolean
+  new: boolean
+  newThirdPartyFBM: boolean
+  newPrimeExclusive: boolean
+  salesRank: boolean
+  rating: boolean
+  ratingCount: boolean
+  newOfferCount: boolean
+}
+
+interface KeepaLegendProps {
+  selectedMetrics: SelectedMetrics
+  onMetricToggle: (metric: string) => void
+}
+
+const legendItems = [
+  { key: 'buyBox', label: 'Buy Box', color: '#FF6B35', icon: '🔶' },
+  { key: 'amazon', label: 'Amazon', color: '#FFA500', icon: '🟠' },
+  { key: 'new', label: 'New', color: '#4169E1', icon: '🔵' },
+  { key: 'newThirdPartyFBM', label: 'New, 3rd Party FBM', color: '#32CD32', icon: '🟢' },
+  { key: 'newPrimeExclusive', label: 'New, Prime exclusive', color: '#800080', icon: '🟣' },
+  { key: 'salesRank', label: 'Sales Rank', color: '#90EE90', icon: '📈', subRanks: true },
+  { key: 'rating', label: 'Rating', color: '#20B2AA', icon: '⭐' },
+  { key: 'ratingCount', label: 'Rating Count', color: '#FFD700', icon: '👥' },
+  { key: 'newOfferCount', label: 'New Offer Count', color: '#8A2BE2', icon: '🛒' }
+]
+
+export default function KeepaLegend({ selectedMetrics, onMetricToggle }: KeepaLegendProps) {
+  return (
+    <div className="w-80 border-l border-border bg-[#FAFAFA] p-4">
+      <div className="space-y-2">
+        <div className="flex items-center justify-between mb-4">
+          <h4 className="font-semibold text-sm text-[#01011D]">List Price</h4>
+          <button className="text-xs text-[#787891] hover:text-[#01011D] cursor-help">
+            📅 Range
+          </button>
+        </div>
+        
+        {/* Legend Items */}
+        <div className="space-y-2">
+          {legendItems.map((item) => (
+            <div key={item.key} className="space-y-1">
+              <div
+                className={`flex items-center gap-2 p-2 rounded cursor-pointer hover:bg-white transition-colors ${
+                  selectedMetrics[item.key as keyof SelectedMetrics] ? 'bg-white shadow-sm' : ''
+                }`}
+                onClick={() => onMetricToggle(item.key)}
+              >
+                <div 
+                  className="w-4 h-4 rounded border"
+                  style={{ 
+                    backgroundColor: selectedMetrics[item.key as keyof SelectedMetrics] ? item.color : 'transparent',
+                    borderColor: item.color 
+                  }}
+                />
+                <span className="text-xs flex-1">{item.label}</span>
+                <span className="text-xs">{item.icon}</span>
+              </div>
+              
+              {/* Sub-ranks for Sales Rank */}
+              {item.subRanks && selectedMetrics.salesRank && (
+                <div className="ml-6 space-y-1">
+                  <div className="flex items-center gap-2 text-xs text-[#787891]">
+                    <div className="w-3 h-3 rounded bg-green-500" />
+                    <span>Fashion</span>
+                  </div>
+                  <div className="flex items-center gap-2 text-xs text-[#787891]">
+                    <div className="w-3 h-3 rounded bg-green-600" />
+                    <span>Women&apos;s Boots ⚠️ 3</span>
+                  </div>
+                </div>
+              )}
+            </div>
+          ))}
+        </div>
+        
+        {/* Controls */}
+        <div className="mt-6 pt-4 border-t border-border space-y-3">
+          <div className="flex items-center justify-between">
+            <span className="text-xs text-[#787891]">Day</span>
+            <span className="text-xs text-[#787891]">Week</span>
+          </div>
+          <div className="flex items-center justify-between">
+            <span className="text-xs text-[#787891]">Month</span>
+            <span className="text-xs font-semibold text-[#01011D]">3 Months</span>
+          </div>
+          <div className="text-center text-xs text-[#787891]">
+            All (351 days)
+          </div>
+          
+          <div className="flex items-center justify-between mt-4 pt-4 border-t border-border">
+            <span className="text-xs text-[#787891]">📊 Close-up view</span>
+            <label className="relative inline-flex items-center cursor-pointer">
+              <input type="checkbox" className="sr-only peer" />
+              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary"></div>
+            </label>
+          </div>
+        </div>
+      </div>
+    </div>
+  )
+} 
\ No newline at end of file
diff --git a/app/(dashboard)/keepa/_components/KeepaSearch.tsx b/app/(dashboard)/keepa/_components/KeepaSearch.tsx
new file mode 100644
index 0000000..279d7e8
--- /dev/null
+++ b/app/(dashboard)/keepa/_components/KeepaSearch.tsx
@@ -0,0 +1,104 @@
+"use client"
+
+import { useEffect, useState } from "react"
+import { CiSearch } from "react-icons/ci"
+import { message } from "antd"
+
+interface KeepaSearchProps {
+  onSearch: (asin: string) => void
+  isLoading: boolean
+    initialValue?: string | null
+}
+
+export default function KeepaSearch({ onSearch, isLoading, initialValue }: KeepaSearchProps) {
+  const [searchValue, setSearchValue] = useState("")
+
+  const extractASIN = (input: string): string | null => {
+    // Clean the input
+    const cleaned = input.trim()
+    
+    // If it's already an ASIN (10 characters, alphanumeric)
+    if (/^[A-Z0-9]{10}$/i.test(cleaned)) {
+      return cleaned.toUpperCase()
+    }
+    
+    // Extract ASIN from Amazon URL
+    const asinMatch = cleaned.match(/\/([A-Z0-9]{10})(?:\/|$|\?)/i)
+    if (asinMatch) {
+      return asinMatch[1].toUpperCase()
+    }
+    
+    return null
+  }
+
+  const handleSearch = () => {
+    if (!searchValue.trim()) {
+      message.error("Please enter an ASIN or Amazon product URL")
+      return
+    }
+
+    const asin = extractASIN(searchValue)
+    if (!asin) {
+      message.error("Please enter a valid ASIN or Amazon product URL")
+      return
+    }
+
+    onSearch(asin)
+  }
+
+  const handleKeyPress = (e: React.KeyboardEvent) => {
+    if (e.key === "Enter") {
+      handleSearch()
+    }
+  }
+
+    useEffect(() => {
+    if (initialValue) {
+      setSearchValue(initialValue)
+    }
+  }, [initialValue])
+  return (
+    <div className="border border-border rounded-xl p-6 bg-white">
+      <div className="flex flex-col gap-4">
+        <div>
+          <h3 className="font-semibold text-lg text-[#01011D] mb-2">Product Search</h3>
+          <p className="text-sm text-[#787891]">
+            Enter an Amazon product ASIN or product URL to start tracking price history and sales data
+          </p>
+        </div>
+        
+        <div className="flex gap-3">
+          <div className="flex-1 relative">
+            <input
+              type="text"
+              value={searchValue}
+              onChange={(e) => setSearchValue(e.target.value)}
+              onKeyPress={handleKeyPress}
+              placeholder="Enter ASIN (e.g., B08N5WRWNW) or Amazon product URL"
+              className="w-full px-4 py-3 pr-12 border border-[#EBEBEB] rounded-lg outline-none focus:border-primary focus:ring-1 focus:ring-primary/20"
+              disabled={isLoading}
+            />
+            <CiSearch className="absolute right-4 top-1/2 transform -translate-y-1/2 text-[#787891] size-5" />
+          </div>
+          
+          <button
+            onClick={handleSearch}
+            disabled={isLoading}
+            className="px-6 py-3 bg-primary hover:bg-primary-hover text-white font-medium rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
+          >
+            {isLoading ? "Searching..." : "Track Product"}
+          </button>
+        </div>
+        
+        <div className="text-xs text-[#787891]">
+          <p className="mb-1"><strong>Supported formats:</strong></p>
+          <ul className="space-y-1 ml-4">
+            <li>• ASIN: B08N5WRWNW</li>
+            <li>• Amazon URL: https://www.amazon.com/dp/B08N5WRWNW</li>
+            <li>• Amazon URL: https://www.amazon.co.uk/product/B08N5WRWNW</li>
+          </ul>
+        </div>
+      </div>
+    </div>
+  )
+} 
\ No newline at end of file
diff --git a/app/(dashboard)/keepa/page.tsx b/app/(dashboard)/keepa/page.tsx
new file mode 100644
index 0000000..82c2480
--- /dev/null
+++ b/app/(dashboard)/keepa/page.tsx
@@ -0,0 +1,97 @@
+"use client"
+
+import { useState, useEffect, useRef } from "react"
+import KeepaSearch from "./_components/KeepaSearch"
+import KeepaChart from "./_components/KeepaChart"
+import ErrorMessage from "./_components/ErrorMessage"
+import { useLazyProductSummaryQuery } from "@/redux/api/keepa"
+import { useAppSelector } from "@/redux/hooks"
+
+interface ProductData {
+  title: string
+  asin: string
+  category: string
+  currentPrice: number
+  salesRank: number
+}
+
+export default function KeepaPage() {
+  const [selectedProduct, setSelectedProduct] = useState<ProductData | null>(null)
+  const [currentAsin, setCurrentAsin] = useState<string>("")
+  const [error, setError] = useState<string | null>(null)
+  const { marketplaceId } = useAppSelector((state) => state?.global)
+  const [isLoading, setIsLoading] = useState(false)
+  const initialAsinFetched = useRef(false)
+  const [initialAsin, setInitialAsin] = useState<string | null>(null)
+  const [getProductSummary, { isLoading: summaryLoading }] = useLazyProductSummaryQuery()
+
+  const handleProductSearch = async (asin: string) => {
+    setIsLoading(true)
+    setError(null)
+    setSelectedProduct(null)
+    setCurrentAsin(asin)
+
+    try {
+      const summaryResult = await getProductSummary({ asin, id: marketplaceId }).unwrap()
+
+      if (summaryResult?.data?.product_info) {
+        const productInfo = summaryResult.data.product_info
+        const mockProduct: ProductData = {
+          title: productInfo.name || "Product Name",
+          asin: productInfo.asin || asin,
+          category: summaryResult.data.category_sales_ranks?.[0]?.name || "Unknown Category",
+          currentPrice: summaryResult.data.price_range?.current || 0,
+          salesRank: summaryResult.data.sales_rank?.current || 0,
+        }
+        setSelectedProduct(mockProduct)
+      } else {
+        setError("Product not found or no data available for the provided ASIN. Please check the ASIN and try again.")
+      }
+    } catch (err) {
+      console.error("Error fetching product data:", err)
+      setError("Failed to fetch product data. The product may not exist in the selected marketplace, or there was a network issue.")
+    } finally {
+      setIsLoading(false)
+    }
+  }
+
+  // Check for ASIN in URL on initial load
+  useEffect(() => {
+    if (initialAsinFetched.current || !marketplaceId) return
+
+    const queryParams = new URLSearchParams(window.location.search)
+    const asinParam = queryParams.get('asin')
+    
+    if (asinParam) {
+      initialAsinFetched.current = true
+      setInitialAsin(asinParam) // Set the initial ASIN value
+      handleProductSearch(asinParam)
+    }
+  }, [marketplaceId])
+
+
+  return (
+    <div className="p-6 space-y-6">
+      <div className="flex items-center justify-between">
+        <div>
+          <h1 className="text-2xl font-bold text-[#01011D]">Keepa</h1>
+          <p className="text-[#787891]">Track product prices, sales ranks, and market data</p>
+        </div>
+      </div>
+
+      <div className="grid gap-6">
+         <KeepaSearch 
+          onSearch={handleProductSearch} 
+          isLoading={isLoading || summaryLoading} 
+          initialValue={initialAsin} 
+        />
+        
+        {error && <ErrorMessage message={error} />}
+        
+        {selectedProduct && !isLoading && !error && (
+          <KeepaChart product={selectedProduct} isLoading={isLoading || summaryLoading} asin={currentAsin} />
+        )}
+      </div>
+    </div>
+  )
+}
\ No newline at end of file
