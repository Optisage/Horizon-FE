diff --git a/redux/api/auth.ts b/redux/api/auth.ts
index 54049b7..41962f7 100644
--- a/redux/api/auth.ts
+++ b/redux/api/auth.ts
@@ -33,14 +33,30 @@ export const authApi = createApi({
 
           dispatch(setUser(data?.data.user));
 
+          // Determine allowed origin for message
+          const currentOrigin = window.location.origin;
+          const targetOrigin = currentOrigin.includes("staging.")
+            ? "https://staging.optisage.ai"
+            : "https://app.optisage.ai";
+
           // Send token to extension if in iframe
           if (window.parent !== window) {
+            // Send STORE_TOKEN message
             window.parent.postMessage(
               {
                 type: "STORE_TOKEN",
                 token: token,
               },
-              "*"
+              targetOrigin
+            );
+
+            // Send LOGIN_SUCCESS message
+            window.parent.postMessage(
+              {
+                type: "LOGIN_SUCCESS",
+                token: token,
+              },
+              targetOrigin
             );
           }
         } catch (error) {
@@ -71,6 +87,25 @@ export const authApi = createApi({
         method: "POST",
         body: data,
       }),
+      onQueryStarted: async (id, { dispatch, queryFulfilled }) => {
+        try {
+          const { data } = await queryFulfilled;
+          const token = data?.data?.token;
+
+          // Set cookie (web app)
+          Cookies.set("optisage-token", token, {
+            expires: new Date(new Date().getTime() + 6 * 60 * 60 * 1000),
+            path: "/",
+            sameSite: "None",
+            secure: true,
+          });
+
+          dispatch(setUser(data?.data.user));
+
+        } catch (error) {
+          console.error("Set password failed:", error);
+        }
+      },
     }),
     forgetPassword: builder.mutation({
       query: (data) => ({
@@ -123,12 +158,43 @@ export const authApi = createApi({
         body: data,
       }),
     }),
+    updateUser: builder.mutation({
+      query: (data) => ({
+        url: "auth/update-user",
+        method: "POST",
+        body: data,
+      }),
+    }),
     getPricing: builder.query<any, {}>({
+      query: () => ({
+        url: "pricing/new",
+        method: "GET",
+      }),
+    }),
+    getUserPricing: builder.query<any, {}>({
       query: () => ({
         url: "pricing",
         method: "GET",
       }),
     }),
+    getProductCategories: builder.query({
+      query: () => ({
+        url: "auth/product-categories",
+        method: "GET",
+      }),
+    }),
+    getExperinceLevel: builder.query({
+      query: () => ({
+        url: "auth/experience-levels",
+        method: "GET",
+      }),
+    }),
+    getCountries: builder.query({
+      query: () => ({
+        url: "auth/countries",
+        method: "GET",
+      }),
+    }),
     logout: builder.query({
       query: () => "auth/logout",
     }),
@@ -143,10 +209,14 @@ export const {
   useCreatePasswordMutation,
   useForgetPasswordMutation,
   useLazyGetPricingQuery,
+  useLazyGetUserPricingQuery,
   useSetPasswordMutation,
   useResetPasswordMutation,
   useLazyAmazonAuthQuery,
   useResendVerificationMutation,
   useChangePasswordMutation,
+  useLazyGetCountriesQuery,
+  useLazyGetExperinceLevelQuery,
+  useLazyGetProductCategoriesQuery,
+  useUpdateUserMutation
 } = authApi;
-
