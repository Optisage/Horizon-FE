diff --git a/app/(dashboard)/seller/_components/MonitorButton.tsx b/app/(dashboard)/seller/_components/MonitorButton.tsx
new file mode 100644
index 0000000..e7608c0
--- /dev/null
+++ b/app/(dashboard)/seller/_components/MonitorButton.tsx
@@ -0,0 +1,98 @@
+"use client";
+/* eslint-disable @typescript-eslint/no-explicit-any */
+import { useEffect, useState } from "react";
+import { message } from "antd";
+import { HiOutlineEye, HiOutlineEyeSlash } from "react-icons/hi2";
+import { 
+  useMonitorSellerMutation, 
+  useUnmonitorSellerMutation, 
+  useGetMonitoredSellersQuery 
+} from "@/redux/api/monitorApi";
+
+interface MonitorButtonProps {
+  sellerId: string;
+  marketplaceId: number;
+}
+
+const MonitorButton: React.FC<MonitorButtonProps> = ({ sellerId, marketplaceId }) => {
+  const [messageApi, contextHolder] = message.useMessage();
+  const [isMonitored, setIsMonitoring] = useState(false);
+// Query to check if seller is already monitored
+  const { data: monitoredSellers, isLoading: isLoadingMonitored } = useGetMonitoredSellersQuery({});
+
+
+  useEffect(()=>{
+    if(monitoredSellers && monitoredSellers?.data?.length > 0) {
+      const isAlreadyMonitored = monitoredSellers.data.some(
+        (seller) => seller.seller_id.toString() === sellerId.toString() && seller.marketplace.id === marketplaceId
+      );
+      setIsMonitoring(isAlreadyMonitored);
+    }
+
+  },[ monitoredSellers, sellerId, marketplaceId ]);
+  
+  
+  
+  // Mutations for monitoring/unmonitoring
+  const [monitorSeller, { isLoading: isMonitoring }] = useMonitorSellerMutation();
+  const [unmonitorSeller, { isLoading: isUnmonitoring }] = useUnmonitorSellerMutation();
+  
+  // Check if current seller is being monitored
+   
+  
+  const isLoading = isLoadingMonitored || isMonitoring || isUnmonitoring;
+  
+  const handleMonitorToggle = async () => {
+    try {
+      if (isMonitored) {
+        const result = await unmonitorSeller({ sellerId, marketplaceId }).unwrap();
+        messageApi.success(result.message || "Seller unmonitored successfully");
+        setIsMonitoring(false);
+      } else {
+        const result = await monitorSeller({ sellerId, marketplaceId }).unwrap();
+        messageApi.success(result.message || "Seller is now being monitored");
+        setIsMonitoring(true);
+      }
+    } catch (error: any) {
+      const errorMessage = error?.data?.message || "An error occurred";
+      messageApi.error(errorMessage);
+    }
+  };
+  
+  return (
+    <>
+      {contextHolder}
+      <button
+        onClick={handleMonitorToggle}
+        disabled={isLoading}
+        className={`
+          flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-sm transition-all duration-200
+          ${isMonitored 
+            ? 'bg-red-50 text-red-600 border border-red-200 hover:bg-red-100' 
+            : 'bg-primary text-white hover:bg-primary/90'
+          }
+          ${isLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
+        `}
+      >
+        {isLoading ? (
+          <>
+            <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
+            Loading...
+          </>
+        ) : isMonitored ? (
+          <>
+            <HiOutlineEyeSlash className="w-4 h-4" />
+            Unmonitor
+          </>
+        ) : (
+          <>
+            <HiOutlineEye className="w-4 h-4" />
+            Monitor
+          </>
+        )}
+      </button>
+    </>
+  );
+};
+
+export default MonitorButton; 
\ No newline at end of file
diff --git a/app/(dashboard)/seller/_components/Seller.tsx b/app/(dashboard)/seller/_components/Seller.tsx
index aabcdc0..a9366e4 100644
--- a/app/(dashboard)/seller/_components/Seller.tsx
+++ b/app/(dashboard)/seller/_components/Seller.tsx
@@ -17,6 +17,7 @@ import { HiOutlineUsers } from "react-icons/hi2"
 import KeepaChart from "./keepa-chart"
 import { debounce } from "@/utils/debounce"
 import FinalLoader from "../../dashboard/_components/loader"
+import MonitorButton from "./MonitorButton"
 
 // Define the Product interface
 export interface Product {
@@ -276,8 +277,11 @@ const handleCategoryClick = (categoryId: number) => {
           <div className="grid sm:grid-cols-2 xl:grid-cols-3 gap-4 gap-y-6">
             {/* store details */}
             <div className="rounded-lg border border-border flex flex-col divide-y divide-[#EDEDED] text-[#252525] text-sm">
-              <span className="p-4 border-b border-border mb-2">
+              <span className="p-4 border-b border-border mb-2 flex justify-between items-center">
                 <p className="bg-primary rounded-2xl py-2 px-4 text-white font-semibold w-max">Store Details</p>
+                {sellerId && marketplaceId && (
+                  <MonitorButton sellerId={sellerId} marketplaceId={marketplaceId} />
+                )}
               </span>
               <span className="p-4 bg-[#F7F7F7] flex justify-between items-center font-medium">
                 <p>Seller Name</p>
@@ -381,9 +385,9 @@ const handleCategoryClick = (categoryId: number) => {
 
                   return (
                     <div key={index}>
-                      <div className="grid sm:grid-cols-2 lg:grid-cols-[3fr_2fr_2fr] xl:grid-cols-[4fr_2fr_2fr] gap-2 gap-y-4">
+                      <div className="grid sm:grid-cols-2 lg:grid-cols-[3fr_2fr_2fr] xl:grid-cols-[4fr_2fr_2fr] gap-2 gap-y-4 items-stretch">
                         {/* Product Image and Basic Info */}
-                        <div className="flex flex-col divide-y divide-border rounded-xl border border-border">
+                        <div className="flex flex-col divide-y divide-border rounded-xl border border-border h-full">
                           <div className="flex flex-col sm:flex-row items-center gap-4 p-3">
                             <div
                               className="relative w-full max-w-[166px] h-[197px] bg-[#F3F4F6]"
@@ -448,6 +452,7 @@ const handleCategoryClick = (categoryId: number) => {
                                 ASIN: {basicDetails.asin}, UPC: {basicDetails.upc || "N/A"}
                               </p>
                               <p className="text-sm">Category: {basicDetails.category}</p>
+
                               <p className="text-lg font-bold mt-2">
                                 {product.buybox_details.currency}
                                 {product.buybox_details.buybox_price.toFixed(2)}
@@ -513,7 +518,7 @@ const handleCategoryClick = (categoryId: number) => {
                         </div>
 
                         {/* Top 5 Offers */}
-                        <div className="rounded-xl border border-border overflow-hidden">
+                        <div className="rounded-xl border border-border overflow-hidden h-full">
                           <div className="p-4">
                             <p className="bg-primary flex items-center gap-1 rounded-2xl py-2 px-4 text-white font-semibold w-max text-xs">
                               <HiOutlineUsers className="size-4" />
@@ -573,7 +578,26 @@ const handleCategoryClick = (categoryId: number) => {
                         </div>
 
                         {/* Keepa Chart */}
-                        <KeepaChart chartData={product?.chart} currency={product?.buybox_details.currency} />
+                        <div className="relative h-full">
+                          <KeepaChart 
+                            chartData={product?.chart} 
+                            currency={product?.buybox_details.currency} 
+                            asin={basicDetails?.asin}
+                            index={index}
+                          />
+                          
+                          {/* Blur overlay for non-first rows */}
+                          {index > 0 && (
+                            <div className="absolute inset-0 bg-white/15 backdrop-blur-[2px] rounded-xl flex items-center justify-center">
+                              <button
+                                onClick={() => window.open(`/keepa?asin=${basicDetails.asin}`, '_blank', 'noopener,noreferrer')}
+                                className="bg-primary hover:bg-primary/90 text-white rounded-lg px-6 py-3 text-sm font-semibold shadow-lg transition-colors"
+                              >
+                                View Keepa
+                              </button>
+                            </div>
+                          )}
+                        </div>
                       </div>
                     </div>
                   )
diff --git a/app/(dashboard)/seller/_components/keepa-chart.tsx b/app/(dashboard)/seller/_components/keepa-chart.tsx
index 5808445..d116124 100644
--- a/app/(dashboard)/seller/_components/keepa-chart.tsx
+++ b/app/(dashboard)/seller/_components/keepa-chart.tsx
@@ -1,4 +1,4 @@
-import { useState } from "react";
+import { useState, useMemo, useEffect } from "react";
 import {
   LineChart,
   Line,
@@ -9,7 +9,10 @@ import {
   Legend,
   ResponsiveContainer,
 } from "recharts";
-import { BiChevronDown } from "react-icons/bi";
+
+import { useLazyPriceHistoryQuery } from "@/redux/api/keepa";
+import { useAppSelector } from "@/redux/hooks";
+import { LoadingOutlined } from "@ant-design/icons";
 
 interface ChartDataPoint {
   date: string;
@@ -29,22 +32,40 @@ interface ChartData {
 interface KeepaChartProps {
   chartData?: ChartData | null;
   currency?: string;
+  asin?: string; // Add ASIN prop for API calls
+  index?: number;
 }
 
-const KeepaChart = ({ chartData, currency = "" }: KeepaChartProps) => {
-  const [timeRange, setTimeRange] = useState("30");
+interface ProcessedChartDataPoint {
+  date: string;
+  dateFormatted: string;
+  fullDate: string;
+  amazon: number | null;
+  buybox: number | null;
+  new: number | null;
+}
+
+
+
+const KeepaChart = ({ chartData, currency = "", asin, index }: KeepaChartProps) => {
+  const { marketplaceId } = useAppSelector((state) => state?.global);
+  const timeRange = "30"; // Fixed at 30 days
+  const [isTimeRangeChanging, setIsTimeRangeChanging] = useState(false);
+  
+  // API hook for price history
+  const [getPriceHistory, { data: priceHistoryData, isLoading: priceHistoryLoading }] = useLazyPriceHistoryQuery();
+
+  // Fallback function for legacy data
   const transformData = () => {
     if (!chartData) return [];
 
     const rangeData = chartData[timeRange];
-
     if (!rangeData) return [];
 
     const amazonData = rangeData.amazon || [];
     const salesRankData = rangeData.sales_rank || [];
     const newFBAData = rangeData.new_fba || [];
 
-    // Combine all dates from all data sources
     const allDates = [
       ...amazonData.map((d: ChartDataPoint) => d.date),
       ...salesRankData.map((d: ChartDataPoint) => d.date),
@@ -54,36 +75,156 @@ const KeepaChart = ({ chartData, currency = "" }: KeepaChartProps) => {
     const uniqueDates = [...new Set(allDates)].sort();
 
     return uniqueDates.map((date) => {
+      const formatDate = () => {
+        const dateObj = new Date(date);
+        return dateObj.toLocaleDateString("en-GB", {
+          month: "short",
+          day: "numeric",
+        });
+      };
+
       return {
         date,
-        amazon:
-          amazonData.find((d: ChartDataPoint) => d.date === date)?.price ||
-          null,
-        sales_rank:
-          salesRankData.find((d: ChartDataPoint) => d.date === date)?.price ||
-          null,
-        new_fba:
-          newFBAData.find((d: ChartDataPoint) => d.date === date)?.price ||
-          null,
+        dateFormatted: formatDate(),
+        fullDate: new Date(date).toLocaleDateString("en-GB", {
+          weekday: "long",
+          year: "numeric",
+          month: "long",
+          day: "numeric",
+        }),
+        amazon: amazonData.find((d: ChartDataPoint) => d.date === date)?.price || null,
+        buybox: null, // Legacy data doesn't have buybox
+        new: newFBAData.find((d: ChartDataPoint) => d.date === date)?.price || null,
       };
     });
   };
 
-  const chartDataTransformed = transformData();
+  // Fetch price history data when ASIN and marketplace changes
+  useEffect(() => {
+    if (asin && marketplaceId) {
+      setIsTimeRangeChanging(true);
+      
+      getPriceHistory({
+        asin,
+        id: marketplaceId,
+        period: "30d",
+      }).finally(() => {
+        setIsTimeRangeChanging(false);
+      });
+    }
+  }, [asin, marketplaceId, getPriceHistory]);
+
+  // Process API data for chart display
+  const processedChartData: ProcessedChartDataPoint[] = useMemo(() => {
+    if (!priceHistoryData?.data?.price_history?.price_types) {
+      return transformData(); // Fallback to old data
+    }
+
+    const priceHistory = priceHistoryData.data.price_history.price_types;
+    const amazonData = priceHistory.amazon?.data || {};
+    const buyboxData = priceHistory.buybox?.data || {};
+    const newData = priceHistory.new?.data || {};
+
+    // Get all unique timestamps from all price types
+    const allTimestamps = new Set<string>();
+    Object.keys(amazonData).forEach(timestamp => allTimestamps.add(timestamp));
+    Object.keys(buyboxData).forEach(timestamp => allTimestamps.add(timestamp));
+    Object.keys(newData).forEach(timestamp => allTimestamps.add(timestamp));
+
+    const sortedTimestamps = Array.from(allTimestamps).sort();
+
+    return sortedTimestamps.map((timestamp) => {
+      const date = new Date(timestamp);
+      
+      const formatDate = () => {
+        return date.toLocaleDateString("en-GB", {
+          month: "short",
+          day: "numeric",
+        });
+      };
+
+      const amazonPrice = amazonData[timestamp]?.price ?? null;
+      const buyboxPrice = buyboxData[timestamp]?.price ?? null;
+      const newPrice = newData[timestamp]?.price ?? null;
 
-  if (
-    !chartData ||
-    !Object.keys(chartData).length ||
-    !chartDataTransformed.length
-  ) {
+      return {
+        date: timestamp,
+        dateFormatted: formatDate(),
+        fullDate: date.toLocaleDateString("en-GB", {
+          weekday: "long",
+          year: "numeric",
+          month: "long",
+          day: "numeric",
+        }),
+        amazon: amazonPrice,
+        buybox: buyboxPrice,
+        new: newPrice,
+      };
+    }).filter(item => item.amazon !== null || item.buybox !== null || item.new !== null);
+  }, [priceHistoryData, timeRange, chartData]);
+
+  const finalChartData = priceHistoryData ? processedChartData : transformData();
+  const isLoading = priceHistoryLoading || isTimeRangeChanging;
+
+  // Determine which lines to show based on data availability
+  const hasAmazonData = finalChartData.some(item => item.amazon !== null);
+  const hasBuyboxData = finalChartData.some(item => item.buybox !== null);
+  const hasNewData = finalChartData.some(item => item.new !== null);
+
+  // Debug logging for new marketplace data
+  
+
+  // Custom tooltip component
+  interface TooltipProps {
+    active?: boolean;
+    payload?: Array<{
+      dataKey: string;
+      value: number | null;
+      color: string;
+      name: string;
+    }>;
+    label?: string;
+  }
+
+  const CustomTooltip = ({ active, payload, label }: TooltipProps) => {
+    if (active && payload && payload.length) {
+      const dataPoint = finalChartData.find((d) => d.dateFormatted === label);
+      return (
+        <div className="bg-white p-3 border border-gray-200 rounded shadow-lg">
+          <p className="font-medium text-gray-800 mb-2">
+            {dataPoint?.fullDate || label}
+          </p>
+          {payload.map((entry, index: number) => {
+            if (entry.value === null || entry.value === undefined) return null;
+            return (
+              <p key={index} style={{ color: entry.color }} className="text-sm">
+                {entry.name}: {currency}{Number(entry.value).toFixed(2)}
+              </p>
+            );
+          })}
+        </div>
+      );
+    }
+    return null;
+  };
+
+  if (!finalChartData.length && !isLoading) {
     return (
-      <div className="rounded-xl border border-border p-4 bg-white">
-        <div className="flex justify-between items-center mb-4">
+      <div className="rounded-xl border border-border h-full flex flex-col bg-white">
+        <div className="p-4 flex-shrink-0 flex items-center justify-between">
           <p className="bg-[#F3F4F6] rounded-2xl py-2 px-4 text-[#676A75] font-semibold w-max text-xs">
             Keepa(beta)
           </p>
+          {index === 0 && asin && (
+            <button
+              onClick={() => window.open(`/keepa?asin=${asin}`, '_blank', 'noopener,noreferrer')}
+              className="bg-primary text-white rounded-lg px-4 py-2 text-xs font-semibold hover:bg-primary/90 transition-colors"
+            >
+              View keepa
+            </button>
+          )}
         </div>
-        <div className="h-64 flex items-center justify-center text-gray-500">
+        <div className="flex-1 flex items-center justify-center text-gray-500">
           No chart data available
         </div>
       </div>
@@ -91,60 +232,53 @@ const KeepaChart = ({ chartData, currency = "" }: KeepaChartProps) => {
   }
 
   return (
-    <div className="rounded-xl border border-border">
-      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden h-full">
-        <div className="p-4 flex gap-4 justify-between">
+    <div className="rounded-xl border border-border h-full flex flex-col">
+      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden h-full flex flex-col">
+        <div className="p-4 flex-shrink-0 flex items-center justify-between">
           <p className="bg-[#F3F4F6] rounded-2xl py-2 px-4 text-[#676A75] font-semibold w-max text-xs">
-            Keepa
+            Keepa(beta)
           </p>
-          <div className="relative">
-            <select
-              aria-label="Filter"
-              value={timeRange}
-              onChange={(e) => setTimeRange(e.target.value)}
-              className="bg-primary flex items-center gap-2.5 rounded-2xl py-2 pl-3 pr-8 text-white font-semibold w-max text-xs appearance-none outline-none"
+          {index === 0 && asin && (
+            <button
+              onClick={() => window.open(`/keepa?asin=${asin}`, '_blank', 'noopener,noreferrer')}
+              className="bg-primary text-white rounded-lg px-4 py-2 text-xs font-semibold hover:bg-primary/90 transition-colors"
             >
-              <option value="30" className="bg-white text-black rounded-t-md">
-                30 days
-              </option>
-              <option value="90" className="bg-white text-black rounded-t-md">
-                90 days
-              </option>
-              <option value="180" className="bg-white text-black rounded-t-md">
-                180 days
-              </option>
-              <option value="all" className="bg-white text-black rounded-t-md">
-                All time
-              </option>
-            </select>
-            <BiChevronDown className="absolute right-2 top-1/2 -translate-y-1/2 text-white pointer-events-none" />
-          </div>
+              View keepa
+            </button>
+          )}
         </div>
 
-        <div className="p-3 relative h-64">
+        <div className="relative flex-1 min-h-0">
+          {isLoading && (
+            <div className="absolute inset-0 bg-white/80 flex items-center justify-center z-10">
+              <div className="flex items-center gap-2 text-sm text-gray-600">
+                <LoadingOutlined spin />
+                Loading chart data...
+              </div>
+            </div>
+          )}
+          
           <ResponsiveContainer width="100%" height="100%">
             <LineChart
-              data={chartDataTransformed}
+              data={finalChartData}
               margin={{ top: 5, right: 0, left: 0, bottom: 5 }}
             >
               <CartesianGrid strokeDasharray="3 3" vertical={false} />
               <XAxis
-                dataKey="date"
-                tickFormatter={(date) =>
-                  new Date(date).toLocaleDateString("en-US", {
-                    month: "short",
-                    day: "numeric",
-                  })
-                }
+                dataKey="dateFormatted"
+                tickFormatter={(date) => date}
                 tick={{ fontSize: 10 }}
+                interval={Math.max(1, Math.floor(finalChartData.length / 6))}
               />
-              <YAxis tick={{ fontSize: 10 }} width={40} />
-              <Tooltip
-                formatter={(value) => [`${currency}${value}`, ""]}
-                labelFormatter={(date) => new Date(date).toLocaleDateString()}
+              <YAxis 
+                tick={{ fontSize: 10 }} 
+                width={30}
               />
+              <Tooltip content={<CustomTooltip />} />
               <Legend wrapperStyle={{ fontSize: "12px", paddingTop: "10px" }} />
-              {chartData[timeRange]?.amazon && (
+              
+              {/* Amazon Price Line - show if available */}
+              {hasAmazonData && (
                 <Line
                   type="monotone"
                   dataKey="amazon"
@@ -153,28 +287,35 @@ const KeepaChart = ({ chartData, currency = "" }: KeepaChartProps) => {
                   dot={false}
                   name="AMAZON"
                   activeDot={{ r: 4 }}
+                  connectNulls={false}
                 />
               )}
-              {chartData[timeRange]?.sales_rank && (
+              
+              {/* Buybox Price Line - show if available */}
+              {hasBuyboxData && (
                 <Line
                   type="monotone"
-                  dataKey="sales_rank"
+                  dataKey="buybox"
                   stroke="#4ECDC4"
-                  strokeWidth={4}
+                  strokeWidth={2}
                   dot={false}
-                  name="SALES RANK"
+                  name="BUYBOX"
                   activeDot={{ r: 4 }}
+                  connectNulls={false}
                 />
               )}
-              {chartData[timeRange]?.new_fba && (
+              
+              {/* New Marketplace Line - show if data is available */}
+              {hasNewData && (
                 <Line
                   type="monotone"
-                  dataKey="new_fba"
-                  stroke="#6A67CE"
-                  strokeWidth={4}
+                  dataKey="new"
+                  stroke="#45B7D1"
+                  strokeWidth={2}
                   dot={false}
-                  name="NEW FBA"
+                  name="NEW"
                   activeDot={{ r: 4 }}
+                  connectNulls={false}
                 />
               )}
             </LineChart>
