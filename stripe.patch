diff --git a/app/stripe/checkout/page.tsx b/app/stripe/checkout/page.tsx
index 6c42466..32a3f45 100644
--- a/app/stripe/checkout/page.tsx
+++ b/app/stripe/checkout/page.tsx
@@ -1,36 +1,31 @@
 "use client";
+/* eslint-disable react/no-unescaped-entities */
 import { useVerifyStripeSubscriptionMutation } from "@/redux/api/subscriptionApi";
 import Image from "next/image";
 import Link from "next/link";
-import { useSearchParams } from "next/navigation";
+import { useSearchParams, useRouter } from "next/navigation";
 import { useEffect, useState } from "react";
 import Logo from "@/public/assets/svg/Optisage Logo.svg";
-import success from "@/public/assets/svg/subSuccess.svg";
-import failedimg from "@/public/assets/svg/subFailed.svg";
-import { useResendVerificationMutation } from "@/redux/api/auth";
-import { Button, message } from "antd";
+import success from "@/public/assets/svg/success.svg";
+import failedimg from "@/public/assets/svg/cancel.svg";
+import { Button } from "antd";
+
 export default function StripeCheckout() {
   const searchParams = useSearchParams();
+  const router = useRouter();
   const status = searchParams.get("status");
   const [loading, setLoading] = useState(false);
-  const [failed, setFailed] = useState(status !== "success");
+  const [failed, setFailed] = useState(status !== "success");//
   const [verifySubscription] = useVerifyStripeSubscriptionMutation();
-  const [resendLink, { isLoading }] = useResendVerificationMutation();
-  const [countdown, setCountdown] = useState(0);
+  const [verificationToken, setVerificationToken] = useState<string>("");
 
-  const [messageApi, contextHolder] = message.useMessage();
   const email = searchParams.get("email") || "";
+  const firstName = searchParams.get("firstName") || "";
+  const lastName = searchParams.get("lastName") || "";
+  const step = searchParams.get("step") || "2";
 
-  // Countdown timer effect
-  useEffect(() => {
-    let intervalId: NodeJS.Timeout;
-    if (countdown > 0) {
-      intervalId = setInterval(() => {
-        setCountdown((prev) => prev - 1);
-      }, 1000);
-    }
-    return () => clearInterval(intervalId);
-  }, [countdown]);
+  // Construct full name
+  const fullName = `${firstName} ${lastName}`.trim();
 
   useEffect(() => {
     const sessionId = searchParams.get("session_id");
@@ -40,44 +35,52 @@ export default function StripeCheckout() {
       setLoading(true);
       verifySubscription({ session_id: sessionId })
         .unwrap()
-        .then(() => {
-          //setEmail(res?.data?.user?.email || "")
+        .then((response) => {
+          console.log("Verification response:", response);
+
+          // Extract token from the response
+          const token = response?.data?.token;
+          if (token) {
+            setVerificationToken(token);
+          }
+
           setLoading(false);
-          setCountdown(60);
+          setFailed(false);
         })
-        .catch(() => {
+        .catch((error) => {
+          console.error("Verification failed:", error);
           setLoading(false);
           setFailed(true);
         });
     }
   }, [searchParams, verifySubscription]);
 
-  const handleResetLink = () => {
-    resendLink({ email })
-      .unwrap()
-      .then(() => {
-        messageApi.success("Email sent");
-        setCountdown(60);
-      })
-      .catch(async (error) => {
-        const errorMessage = await error?.response?.json?.();
-        if (errorMessage?.message === "You are already verified") {
-          messageApi.error("You are already verified");
-        } else {
-          messageApi.error("Failed to send email");
-        }
-      });
+  const handleContinueRegistration = () => {
+    // Create URL params for the signup page
+    const params = new URLSearchParams();
+    if (email) params.set("email", email);
+    if (fullName) params.set("fullname", fullName);
+    if (step) params.set("step", "2");
+    if (verificationToken) params.set("token", verificationToken);
+
+    // Navigate to signup page with user data and token
+    router.push(`/signUp?${params.toString()}`);
+  };
+
+  const handleRetryPayment = () => {
+    // Redirect back to pricing page
+    window.location.href = "https://optisage.ai/#pricing/";
   };
+
   return (
-    <main>
-      {contextHolder}
+    <main className=" bg-[#F8F8F8]">
       {loading ? (
-        <div className=" flex justify-center h-screen items-center">
+        <div className="flex justify-center h-screen items-center">
           <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-primary"></div>
         </div>
       ) : (
-        <section className=" h-screen flex justify-center items-center relative">
-          <div className=" flex justify-center py-10 absolute top-10 w-full">
+        <section className="h-screen flex justify-center items-center relative">
+          <div className="flex justify-center py-10 absolute top-10 w-full">
             <Link href="/">
               <Image
                 src={Logo}
@@ -89,52 +92,54 @@ export default function StripeCheckout() {
             </Link>
           </div>
 
-          <div className=" border rounded-xl shadow-xl p-7 max-w-[500px]">
-            <div className=" flex justify-center">
+          <div className="border rounded-3xl shadow  p-7 max-w-[500px] border-[#E1E1E1] bg-white">
+            <div className="flex justify-center mb-5">
               {failed ? (
-                <Image src={failedimg} alt="failed" className="" />
+                <Image src={failedimg} alt="failed" />
               ) : (
-                <Image src={success} alt="successful " className=" mb-6" />
+                <Image src={success} alt="successful" className="mb-6" />
               )}
             </div>
-            <div className=" flex justify-center md:max-w-[400px]">
+
+            <div className="flex justify-center md:max-w-[400px]">
               {failed ? (
-                <div className=" text-center space-y-2">
-                  <h1 className=" font-semibold text-2xl">
+                <div className="text-center space-y-4">
+                  <h1 className=" font-bold text-3xl text-[#232323]">
                     Payment unsuccessful!
                   </h1>
-                  <p>Please check your payment details and try again.</p>
+                  <p className="text-[#42444A] text-sm">
+                    Please check your payment details and try again.
+                  </p>
                   <div>
-                    <a href="https://optisage.ai/#pricing/">
-                      <button className=" w-full rounded-md border shadow-[0px_-3px_0px_0px_#00000014_inset] py-2">
-                        Select another plan
-                      </button>
-                    </a>
+                    <Button
+                      className="w-full !border-none !rounded-2xl !font-semibold !text-base  py-2 !h-[55px] !bg-[#18CB96] hover:!bg-primary/90 !text-white"
+                      onClick={handleRetryPayment}
+                    >
+                      Select another plan
+                    </Button>
                   </div>
                 </div>
               ) : (
-                <div className=" text-center">
-                  <h1 className=" font-semibold text-2xl mb-6">
-                    Your subscription is successful!
+                <div className="text-center space-y-4">
+                  <h1 className="font-bold text-3xl mb-6">
+                    Payment Successful!
                   </h1>
-                  <p>
-                    An email has been sent to{" "}
-                    <span className=" font-semibold">{email}</span>, please
-                    follow the instructions to set up your account.
-                  </p>
-                  <p className=" text-xs text-gray-400 font-semibold mb-2">
-                    If you do not see it in your inbox, please check spam
-                  </p>
-                  <div className=" mt-1">
+                  <div className="space-y-5">
+                    <p className="text-[#42444A] text-sm font-normal">
+                      Thank you for subscribing to optisage! Your payment has
+                      been processed successfully.
+                    </p>
+                   
+                    <p className="text-sm text-[#42444A] font-semibold">
+                      Let's complete your account setup to get started.
+                    </p>
+                  </div>
+                  <div className="mt-10">
                     <Button
-                      className=" w-full rounded-md border shadow-[0px_-3px_0px_0px_#00000014_inset] py-2"
-                      onClick={handleResetLink}
-                      loading={isLoading}
-                      disabled={isLoading || countdown > 0}
+                    className="w-full !border-none !rounded-2xl !font-semibold !text-base  py-2 !h-[55px] !bg-[#18CB96] hover:!bg-primary/90 !text-white"
+                      onClick={handleContinueRegistration}
                     >
-                      {countdown > 0
-                        ? `Resend in ${countdown}s`
-                        : "Resend Email"}
+                      Continue Registration
                     </Button>
                   </div>
                 </div>
@@ -142,8 +147,11 @@ export default function StripeCheckout() {
             </div>
           </div>
 
-          <div className=" absolute bottom-5 w-full flex justify-center">
-            <a href="https://optisage.ai/contact/#" className=" underline">
+          <div className="absolute bottom-5 w-full flex justify-center">
+            <a
+              href="https://optisage.ai/contact/#"
+              className="underline text-gray-600 hover:text-gray-800"
+            >
               Contact Support
             </a>
           </div>
@@ -152,4 +160,3 @@ export default function StripeCheckout() {
     </main>
   );
 }
-
