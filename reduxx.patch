diff --git a/redux/api/auth.ts b/redux/api/auth.ts
index 41962f7..b1061af 100644
--- a/redux/api/auth.ts
+++ b/redux/api/auth.ts
@@ -165,6 +165,13 @@ export const authApi = createApi({
         body: data,
       }),
     }),
+    updateConnectAmazon: builder.mutation({
+      query: (data) => ({
+        url: "customer/settings/update-amazon-connect-notification",
+        method: "PUT",
+        body: data,
+      }),
+    }),
     getPricing: builder.query<any, {}>({
       query: () => ({
         url: "pricing/new",
@@ -218,5 +225,6 @@ export const {
   useLazyGetCountriesQuery,
   useLazyGetExperinceLevelQuery,
   useLazyGetProductCategoriesQuery,
-  useUpdateUserMutation
+  useUpdateUserMutation,
+  useUpdateConnectAmazonMutation
 } = authApi;
diff --git a/redux/api/monitorApi.ts b/redux/api/monitorApi.ts
index 5818cf3..42c9fcf 100644
--- a/redux/api/monitorApi.ts
+++ b/redux/api/monitorApi.ts
@@ -34,27 +34,48 @@ export const monitorApi = createApi({
     
     getMonitoredSellers: builder.query<
       {
+        status: number;
+        message: string;
         data: Array<{
+          id: number;
           seller_id: string;
-          marketplace_id: number;
+          seller_name: string;
+          seller_amazon_link: string;
+          rating: {
+            count: number;
+            stars: number;
+            percentage_change: number | null;
+            change_type: string | null;
+          };
           marketplace: {
             id: number;
             name: string;
-
+            currency_symbol: string;
+            currency_code: string;
           };
-          created_at: string;
-          updated_at: string;
+          products_count: number;
+          monitoring_since: string;
+          last_updated: string;
         }>;
+        responseCode: string;
         meta: {
           current_page: number;
           per_page: number;
           total: number;
+          pagination: {
+            current_page: number;
+            total_pages: number;
+            per_page: number;
+            total: number;
+            has_next_page: boolean;
+            has_previous_page: boolean;
+          };
         };
       },
-      { page?: number; per_page?: number }
+      { page?: number; per_page?: number, id?: number }
     >({
-      query: ({ page = 1, per_page = 20 } = {}) => ({
-        url: `sellers/monitored?page=${page}&per_page=${per_page}`,
+      query: ({id, page = 1, per_page = 20 } = {}) => ({
+        url: `sellers/monitored?marketplace_id=${id}&page=${page}&per_page=${per_page}`,
         method: "GET",
       }),
       providesTags: ["MonitoredSellers"],
diff --git a/redux/api/quickSearchApi.ts b/redux/api/quickSearchApi.ts
index 96b4be9..bca62f9 100644
--- a/redux/api/quickSearchApi.ts
+++ b/redux/api/quickSearchApi.ts
@@ -50,6 +50,18 @@ export const quickSearchApi = createApi({
                 method: "GET",
             }),
         }),
+        getComparisonProductDetails: builder.query({
+            query: ({ asin, marketplace_id, sales_price }) => ({
+                url: `/go-compare/product-details?asin=${asin}&marketplace_id=${marketplace_id}${sales_price ? `&sales_price=${sales_price}` : ''}`,
+                method: "GET",
+            }),
+        }),
+        refreshQuickSearch: builder.query({
+            query: ({ searchId, perPage = 10 }: { searchId: string | number; perPage?: number }) => ({
+                url: `/go-compare/quick-search/${searchId}?perPage=${perPage}`,
+                method: "GET",
+            }),
+        }),
     }),
 });
 
@@ -60,7 +72,11 @@ export const {
     useGetSearchByIdQuery,
     useReverseSearchQuery,
     useGetProductDetailsQuery,
-    useLazyGetProductDetailsQuery
+    useLazyGetProductDetailsQuery,
+    useGetComparisonProductDetailsQuery,
+    useLazyGetComparisonProductDetailsQuery,
+    useRefreshQuickSearchQuery,
+    useLazyRefreshQuickSearchQuery
 } = quickSearchApi;
 
 
diff --git a/redux/api/user.ts b/redux/api/user.ts
index 071c644..6dbe601 100644
--- a/redux/api/user.ts
+++ b/redux/api/user.ts
@@ -42,6 +42,30 @@ export const userApi = createApi({
         method: "GET",
       }),
     }),
+    getNotifications: builder.query({
+      query: () => ({
+        url: "customer/notifications",
+        method: "GET",
+      }),
+    }),
+    markRead: builder.mutation({
+      query: (id) => ({
+        url: `customer/notifications/${id}`,
+        method: "PUT",
+      }),
+    }),
+    markAllRead: builder.mutation({
+      query: (id) => ({
+        url: `customer/notifications/mark-all-read`,
+        method: "PUT",
+      }),
+    }),
+    deleteAllNotification: builder.mutation({
+      query: (id) => ({
+        url: `customer/notifications/delete-all`,
+        method: "DELETE",
+      }),
+    }),
   }),
 });
 
@@ -49,6 +73,10 @@ export const {
  useLazyGetReferralsQuery,
  useLazyGetSettingsQuery,
  useUpdateSettingsMutation,
- useLazyGetSubscriptionsQuery
+ useLazyGetSubscriptionsQuery,
+ useLazyGetNotificationsQuery,
+ useMarkReadMutation,
+ useMarkAllReadMutation,
+ useDeleteAllNotificationMutation
 
 } = userApi;
diff --git a/redux/store.ts b/redux/store.ts
index c0bc79e..9b86935 100644
--- a/redux/store.ts
+++ b/redux/store.ts
@@ -34,7 +34,7 @@ const rootReducer = combineReducers({
 const persistConfig = {
   key: "root",
   storage,
-  whitelist: ["api", "global", "chat"], // Add "chat" to persist chat history
+  whitelist: ["api", "global"], // Only persist necessary reducers
 };
 const persistedReducer = persistReducer(persistConfig, rootReducer);
 
